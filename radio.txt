#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Rotary.h>
#include <TEA5767.h>

#define ENCODER_A 2  //pierwsze wyjście enkodera
#define ENCODER_B 3  //drugie wyjscie enkodera
#define ENCODER_SW 4 // [przycisk enkodera

#define DEBOUNCE_TIME 40  // cas drganai zestyków 

// Globalne flagi
#define ST_AUTO 0    // flaga automatycznego szukania
#define ST_GO_UP 1   // flaga obrócenia enkodera zgodnie z ruchem wskazówek zegara
#define ST_GO_DOWN 2 //flaga obrócenia enkodera przeciwnie do ruchu wskazówek zegara
#define ST_STEREO 3  // flaga odbieranego sygnałou w stero 
#define ST_SEARCH 4  // flaga strojenia częstotliwosci 

unsigned char buffer[5];
int stereoAvailable; // stacja jest odbierana w trybie stereo
int signalLevel;     // poziom sygnału stacji radiowej
int searchDirection; // kierunek przeszukiwania pasma

// konstruktory 
Rotary rotary(ENCODER_A, ENCODER_B);
LiquidCrystal_I2C lcd(0x27, 16, 2);
TEA5767 radio;

float frequency = 104.5;   // domyślna częstotliwość
volatile byte status = 0; // 0b00000000 -> 0b nic nic nic ST_SEARCH ST_STEREO ST_GO_DOWN  ST_GO_UP  ST_AUTO 
byte currentButtonState = 0;
byte lastButtonState = 0;




void EncoderSetUp()
{
    attachInterrupt(digitalPinToInterrupt(ENCODER_A), encoderISR, CHANGE);
    attachInterrupt(digitalPinToInterrupt(ENCODER_B), encoderISR, CHANGE);
    pinMode(ENCODER_A, INPUT);
    pinMode(ENCODER_B, INPUT);
    pinMode(ENCODER_SW, INPUT);
}

void RadioSetUp()
{
    radio.init();
    radio.set_frequency(frequency);
}

void UartSetUp()
{
  Serial.begin(9600); 
  Serial.println("Type frequency: ");
}

void FreqyencyDisplay()
{
         // Wyświetl ustawioną częstotliwość
       lcd.setCursor(0, 0);
       lcd.print(frequency, 1);
       if (frequency < 108.1)
       {
         lcd.print(" ");
       }
}

void SearchModeDisplay()
{
        // Wyświetl tryb strojenia
        lcd.setCursor(10, 0);
        lcd.print("mode:");
        lcd.print(bitRead(status, ST_AUTO) ? "A" : "M");
}

void SignalLevelDisplay()
{
          // Wyświetl wskaźnik sygnału
        lcd.setCursor(0, 1);
        lcd.print("SL:");
        lcd.print(signalLevel);
        if (signalLevel < 15)
        {
            lcd.print(" ");
        }
}

void SoundDisplay()
{
  
        lcd.setCursor(9, 1);
        if (stereoAvailable)
        {
            lcd.print("Stero");
        }
        else
        {
            lcd.print(" ");
        }
}

void RadioParam()
{
          // Pobierz dane z TEA5767
        frequency = floor(radio.frequency_available(buffer) / 100000 + .5) / 10;
        signalLevel = radio.signal_level(buffer);
        stereoAvailable = radio.stereo(buffer);
}

void Radio()
{
      if (radio.read_status(buffer) == 1)
    {
        RadioParam();
        FreqyencyDisplay();
        SearchModeDisplay();
        SignalLevelDisplay();
        SoundDisplay();
        SearchMode();
    }
}

void SearchMode()
{
  if (bitRead(status, ST_SEARCH))
    {
        // Czy układ automatycznie przeszukuje pasmo?
        if (radio.process_search(buffer, searchDirection) == 1)
        {
            bitWrite(status, ST_SEARCH, 0);
        }
    }
}

void EncoderCW()
{
   // Enkoder został obórcony zgodnie z ruchem wskazówek zegara
    if (bitRead(status, ST_GO_UP) && (frequency < 108.1))
    {
        if (bitRead(status, ST_AUTO) && !bitRead(status, ST_SEARCH))
        {
            // Tryb automatycznego przeszukiwania pasma
            Serial.println("UP AUTO");
            bitWrite(status, ST_SEARCH, 1);
            searchDirection = TEA5767_SEARCH_DIR_UP;
            radio.search_up(buffer);
        }
        else
        {
            // Tryb manualnego strojenia
            Serial.println("UP MAN");
            frequency += 0.1;
            radio.set_frequency(frequency);
        }
        bitWrite(status, ST_GO_UP, 0);
    }
} 

void EncoderCCW()
{
    // Enkoder został obórcony przeciwnie do ruchu wskazówek zegara
    if (bitRead(status, ST_GO_DOWN) && (frequency > 87.9))
    {
        if (bitRead(status, ST_AUTO) && !bitRead(status, ST_SEARCH))
        {
            // Tryb automatycznego przeszukiwania pasma
            Serial.println("DOWN AUTO");
            bitWrite(status, ST_SEARCH, 1);
            searchDirection = TEA5767_SEARCH_DIR_DOWN;
            radio.search_down(buffer);
        }
        else
        {
            // Tryb manualnego strojenia
            Serial.println("DOWN MAN");
            frequency -= 0.1;
            radio.set_frequency(frequency);
        }
        bitWrite(status, ST_GO_DOWN, 0);
    }
}

void EncoderSwitch()
{
    currentButtonState = digitalRead(ENCODER_SW);
    // Zmiana stanu auto/manual
    if (currentButtonState != lastButtonState)
    {
        if (isButtonPressed(ENCODER_SW))
        {
            if (bitRead(status, ST_AUTO))
            {
                bitWrite(status, ST_AUTO, 0);
            }
            else
            {
                bitWrite(status, ST_AUTO, 1);
            }
        }
    }
    lastButtonState = currentButtonState;
}

// funckja obsługująca przerwanie
void encoderISR()
{
    unsigned char result = rotary.process();
    if (result == DIR_CW)
    {
        bitWrite(status, ST_GO_UP, 1);
    }
    else if (result == DIR_CCW)
    {
        bitWrite(status, ST_GO_DOWN, 1);
    }
}

// funkcja sprawdzająca czy przycisk został wciśnięty - w tym wypadku jako polling
bool isButtonPressed(byte button)
{
    if (digitalRead(button) == LOW)
    {
        delay(DEBOUNCE_TIME);
        if (digitalRead(button) == LOW)
        {
            return true;
        }
    }
    return false;
}

void Uartfrequency()
{
   String inString=" ";
  if (Serial.available()>0 )
    {
     inString = Serial.readStringUntil('\n');
     frequency=inString.toFloat();
     Serial.println(frequency);
    }
}
void setup()
{
    EncoderSetUp();
    lcd.begin();
    RadioSetUp();
    UartSetUp();
}


void loop()
{

  Radio();
  EncoderSwitch();
  EncoderCW();
  EncoderCCW();
  Uartfrequency();

 

}
